import { createSlice, PayloadAction } from "@reduxjs/toolkit";
import { v4 as uuidv4 } from "uuid";

const initialState = [] as Todo[];

const todoSlice = createSlice({
  name: "todos",
  initialState,
  reducers: {
    addTodo: {
      /*
      The reducer function is responsible for updating the state when the addTodo action is dispatched. 
      It takes two parameters:
      state: The current state of the todos, which is an array of Todo objects.
      action: An object containing the action type and payload. The payload is expected to be a Todo object.
      The reducer function pushes the new todo item (contained in action.payload) into the current state 
      array.Since Redux Toolkit uses Immer under the hood, we can directly mutate the state object.
      */
      reducer: (state, action: PayloadAction<Todo>) => {
        state.push(action.payload);
      },
      /*
       prepare function helps in structuring the action's payload in a consistent and type-safe manner 
       before it is dispatched to the Redux store.
      */
      prepare: (description: string) => ({
        payload: {
          id: uuidv4(),
          description,
          completed: false,
        } as Todo,
      }),
    },
    // The removeTodo reducer function removes a todo item from the state array based on its id.
    removeTodo(state, action: PayloadAction<string>) {
      const index = state.findIndex((todo) => todo.id === action.payload);
      state.splice(index, 1);
    },
    // The setTodoStatus reducer function updates the completed status of a todo item based on its id.
    setTodoStatus(
      state,
      action: PayloadAction<{ completed: boolean; id: string }>
    ) {
      const index = state.findIndex((todo) => todo.id === action.payload.id);
      state[index].completed = action.payload.completed;
    },
  },
});

// Export the action creators generated by createSlice
export const { addTodo, removeTodo, setTodoStatus } = todoSlice.actions;
export default todoSlice.reducer;
